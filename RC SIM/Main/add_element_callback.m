%Author: Timothy Rokebrand
%The purpose of this file is to collate the geometry and excitation information
%andstore in the appropriate graphics handle. It also gives command to update
%the plot of the geometry upon the addition of an element.

function add_element_callback(gcf, event_data,main_window_handle, add_window, fig)

 if(size(get(main_window_handle.add_element_button,'UserData'))(2) > 0);
    ant = get(main_window_handle.add_element_button,'UserData');
    i=1;    
  else
    i=1;
    ant = struct('wire',wire(0),'helix',helix(0), 'no_of_elements', 0);
  end
  if(get(add_window.radio_active,'Value') == 1)
    volt = str2num(get(add_window.voltage_input,'string'));
    volt_segment = str2num(get(add_window.voltage_seg_input,'string'));
  else
    volt = 0;
    volt_segment = 0;
  end
  switch (get(add_window.element_list,'Value'))
    case 1
      if(ant.wire(1).tag_no > 0)
        i = size(ant.wire)(2) + 1;
      end  
      ant.no_of_elements = ant.no_of_elements +1;
      ant.wire(i) = wire(ant.no_of_elements,... 
      str2num(get(add_window.segment_input, 'string')),...
      str2num(get(add_window.x1_input, 'string')),...
      str2num(get(add_window.y1_input, 'string')),...
      str2num(get(add_window.z1_input, 'string')),...
      str2num(get(add_window.x2_input, 'string')),...
      str2num(get(add_window.y2_input, 'string')),...
      str2num(get(add_window.z2_input, 'string')),...
      0.005,volt,volt_segment);
      
    case 2
      if(ant.helix(1).tag_no > 0)
        i = size(ant.helix)(2) + 1;
      end 
      ant.no_of_elements = ant.no_of_elements +1;
      ant.helix(i) = helix(ant.no_of_elements,...
      str2num(get(add_window.segment_input, 'string')),...
      str2num(get(add_window.helix_spacing_input, 'string')),...
      str2num(get(add_window.helix_length_input, 'string')),...
      str2num(get(add_window.helix_radius_input, 'string')),...
      str2num(get(add_window.helix_radius_input, 'string')),...
      str2num(get(add_window.helix_radius_input, 'string')),...
      str2num(get(add_window.helix_radius_input, 'string')),...
      0.005,volt,volt_segment);
      
    case 4
      if(ant.wire(1).tag_no > 0)
        i = size(ant.wire)(2) + 1;
      end
      yagi_wires = yagi(ant.no_of_elements,...
      str2num(get(add_window.elements_input, 'string')),...
      str2num(get(add_window.driven_length_input, 'string')),...
      str2num(get(add_window.reflector_length_input, 'string')),...
      str2num(get(add_window.director_length_input, 'string')),...
      str2num(get(add_window.drivenReflector_spacing_input, 'string')),...
      str2num(get(add_window.drivenDirector_spacing_input, 'string')),...
      str2num(get(add_window.director_spacing_input, 'string')),...
      0.001,...
      str2num(get(add_window.segment_input, 'string')),...
      str2num(get(add_window.voltage_input, 'string')),...
      str2num(get(add_window.voltage_seg_input, 'string')));
      for j= 1:size(yagi_wires)(2)
        ant.wire(i) = yagi_wires(j);
        i = i+1;
       end
      ant.no_of_elements = ant.no_of_elements + str2num(get(add_window.elements_input, 'string'));
  end    

  set(main_window_handle.add_element_button,'UserData', ant);

  plot_geometry(get(main_window_handle.add_element_button,'UserData'), fig); 
end